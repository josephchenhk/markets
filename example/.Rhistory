# y = mx + b
# 100 = m100 + b
# b = 100 - m 100
# b = 100( 1 - m)
x <- 100*orig/9
b <- 100*(1-slope)
if(orig != 0){
return(slope * x + b)
}else{
return(0)
}
}
sapply(df[,2], 2)
sapply(df[,2], curve, 2)
sapply(df[,2], curve, .2)
curve <- function(orig, slope){
# y = mx + b
# 100 = m100 + b
# b = 100 - m 100
# b = 100( 1 - m)
if(slope > 1)
stop('slope too big')
if(slope < 0)
stop("slipe can't be negative")
x <- 100*orig/9
b <- 100*(1-slope)
if(orig != 0){
return(slope * x + b)
}else{
return(0)
}
}
sapply(df[,2], curve, 2)
sapply(df[,2], curve, .2)
sapply(df[,2], curve, .9)
cgrades <- sapply(df[,2], curve, .9)
hist(cgrades)
summary(cgrades)
cgrades <- sapply(df[,2], curve, .7)
hist(cgrades)
summary(cgrades)
cgrades <- sapply(df[,2], curve, .6)
hist(cgrades)
summary(cgrades)
curve <- function(orig, slope){
# y = mx + b
# 100 = m100 + b
# b = 100 - m 100
# b = 100( 1 - m)
if(slope > 1)
stop('slope too big')
if(slope < 0)
stop("slipe can't be negative")
x <- 100*orig/9
b <- 100*(1-slope)
if(orig != 0){
return(slope * x + b)
}else{
cat("returning 0")
return(0)
}
}
cgrades <- sapply(df[,2], curve, .6)
hist(cgrades)
summary(cgrades)
cgrades
df[,2]
cgrades <- sapply(df[,2], curve, .6)
hist(cgrades)
summary(cgrades)
sort(cgrades)
sort(df[,2])
hist(cgrades)
summary(cgrades)
cgrades <- sapply(df[,2], curve, .5)
hist(cgrades)
summary(cgrades)
sort(cgrades)
df$cgrades <- cgrades
head(df)
df
df
?round(cgrades)
?round(cgrades, 1)
round(.9,1)
round(.9,2)
round(.98,1)
df$cgrades <- round(cgrades, 1)
df
View(df)
df <- read.csv("~/Desktop/section2.csv")
df <- df[,c(1,12)]
colnames(df) <- c("id","uncurved")
head(df)
curve <- function(orig, slope){
# y = mx + b
# 100 = m100 + b
# b = 100 - m 100
# b = 100( 1 - m)
if(slope > 1)
stop('slope too big')
if(slope < 0)
stop("slipe can't be negative")
x <- 100*orig/9
b <- 100*(1-slope)
if(orig != 0){
return(slope * x + b)
}else{
cat("returning 0")
return(0)
}
}
cgrades <- sapply(df[,2], curve, .5)
hist(cgrades)
summary(cgrades)
sort(cgrades)
df$cgrades <- cgrades
df <- read.csv("~/Desktop/section2.csv")
head(df)
df <- df[,c(1,2,12)]
colnames(df) <- c("id","name","uncurved")
curve <- function(orig, slope){
# y = mx + b
# 100 = m100 + b
# b = 100 - m 100
# b = 100( 1 - m)
if(slope > 1)
stop('slope too big')
if(slope < 0)
stop("slipe can't be negative")
x <- 100*orig/9
b <- 100*(1-slope)
if(orig != 0){
return(slope * x + b)
}else{
cat("returning 0")
return(0)
}
}
cgrades <- sapply(df[,2], curve, .5)
hist(cgrades)
head(df)
cgrades <- sapply(df[,3], curve, .5)
hist(cgrades)
summary(cgrades)
sort(cgrades)
df$cgrades <- cgrades
df
df$cgrades <- round(cgrades,1)
df
View(df)
curve <- function(orig, slope){
# y = mx + b
# 100 = m100 + b
# b = 100 - m 100
# b = 100( 1 - m)
if(slope > 1)
stop('slope too big')
if(slope < 0)
stop("slipe can't be negative")
x <- 100*orig/9
b <- 100*(1-slope)
if(orig != 0){
return(slope * x + b)
}else{
cat("returning 0")
return(0)
}
}
df <- df[,c(1,2,12)]
df <- read.csv("~/Desktop/section1.csv")
df <- df[,c(1,2,12)]
head(df)
df <- read.csv("~/Desktop/section2.csv")
df <- df[,c(1,2,12)]
df <- read.csv("~/Desktop/section2.csv")
df <- df[,c(1,2,12)]
colnames(df) <- c("id","name","uncurved")
cgrades <- sapply(df[,2], curve, .5)
warnings()
cgrades <- sapply(df[,3], curve, .5)
cgrades
df$cgrades <- sapply(df[,3], curve, .5)
df
df[df$id=="sy4hc"]
df[df$id=="sy4hc",]
df[df$id=="sy4hc",3]
df[df$id=="sy4hc",3] <- 8
df[df$id=="sy4hc",3]
df$cgrades <- sapply(df[,3], curve, .5)
df
df$cgrades <- round(sapply(df[,3], curve, .5),1)
df
y <- c
buildModelDLM <- function(p) {
phi1 <- p[1]
phi2 <- p[2]
dW1 <- exp(p[3])
dW2 <- exp(p[4])
GG <- matrix(c(1,0,0,0,phi1,phi2,0,1,0),3,3,byrow=T)
W <- diag(c(dW1, dW2, 0))
FF <- matrix(c(1,1,0),1,3)
C0 <- 10^7 *diag(3)
return( list(m0=rep(0,3),C0=C0, FF=FF, GG=GG, W=W, V=0) )
}
y <- c
mle <- dlmMLE(y, parm=rep(0,4), build = buildModelDLM, method="BFGS")
library(dlm)
buildModelDLM <- function(p) {
phi1 <- p[1]
phi2 <- p[2]
dW1 <- exp(p[3])
dW2 <- exp(p[4])
GG <- matrix(c(1,0,0,0,phi1,phi2,0,1,0),3,3,byrow=T)
W <- diag(c(dW1, dW2, 0))
FF <- matrix(c(1,1,0),1,3)
C0 <- 10^7 *diag(3)
return( list(m0=rep(0,3),C0=C0, FF=FF, GG=GG, W=W, V=0) )
}
y <- c
mle <- dlmMLE(y, parm=rep(0,4), build = buildModelDLM, method="BFGS")
mle$par
mle
plot.ts(y)
acf(y)
hist(y)
qqnorm(y)
hist(y)
mle <- dlmMLE(y, parm=rep(.1,4), build = buildModelDLM, method="BFGS")
mle$par
mle
y <- c(0.0511682865744,0.0222506089348,0.0976710271734,0.0511682865744,0.1548647105609,0.0222506089348,0.1021052229372,0.1333063673082,0.0464063728142,0.0976710271734,0.0700856075667,0.0511682865744,0.0560021901153,0.1200027923947,0.1548647105609,0.1021052229372,0.0511682865744,0.1548647105609,0.0747363461140,0.1333063673082,0.0464063728142,0.0174469136037,0.1066996186591,0.0222506089348,0.0560021901153,0.0271286673883,0.0511682865744,0.0606246218164,0.1506588762851,0.0464063728142,0.0511682865744,0.0954010847633,0.0653194661206,0.0319830458531,0.0271286673883,0.0511682865744,0.0700856075667,0.0560021901153,0.1419334958887,0.0464063728142,0.0793655553807,0.0606246218164,0.0976710271734,0.1506588762851,0.0222506089348,0.0222506089348,0.1021052229372,0.0747363461140,0.0700856075667,0.0074720148387,0.0536355491659,0.0464063728142,0.0560021901153,0.0464063728142,0.0416216746908,0.1506588762851,0.1462625069783,0.0838814839807,0.0606246218164,0.0606246218164,0.0271286673883,0.0511682865744,0.0653194661206,0.1506588762851,0.0369103540201,0.1548647105609,0.0464063728142,0.0511682865744,0.0885601769795,0.0271286673883,0.1419334958887,0.0724136805090,0.0511682865744,0.1066996186591,0.0124225199986,0.0511682865744,0.0511682865744,0.0653194661206,0.1200027923947,0.1066996186591,0.0747363461140,0.0271286673883,0.0511682865744,0.0222506089348,0.0606246218164,0.0998453349697,0.0511682865744,0.0511682865744,0.0464063728142,0.0464063728142,0.1021052229372,0.1333063673082,0.0653194661206,0.0511682865744,0.1506588762851,0.0931259779895,0.0369103540201,0.0606246218164,0.1548647105609,0.0222506089348)
mle <- dlmMLE(y, parm=rep(.9,4), build = buildModelDLM, method="BFGS")
mle
mle <- dlmMLE(y, parm=rep(.9,4), build = buildModelDLM, method="BFGS")
traceback()
mle <- dlmMLE(y, parm=rep(.9,4), build = buildModelDLM, method="BFGS", debug=T)
mle
warnings()
?dlm
?dlmMLE
solve(diag(c(1,1,0)))
?dlmLL
dlmLL(y, buildModelDLM(rep(0,4)))
traceback()
?dlmMLE
?dlmLL(y, buildModelDLM(rep(0,4)))
mle <- dlmMLE(y, parm=rep(.9,4), build = buildModelDLM, method="BFGS", debug=T)
mle <- dlmMLE(y, parm=rep(.9,4), build = buildModelDLM, method="BFGS")
mle <- dlmMLE(y, parm=rep(0,4), build = buildModelDLM, method="BFGS")
mle <- dlmMLE(y, parm=rep(0,4), build = buildModelDLM, method="BFGS", debug=T)
df <- read.csv("~/Desktop/section2.csv")
df <- df[,c(1,2,12)]
colnames(df) <- c("id","name","uncurved")
curve <- function(orig, slope){
# y = mx + b
# 100 = m100 + b
# b = 100 - m 100
# b = 100( 1 - m)
if(slope > 1)
stop('slope too big')
if(slope < 0)
stop("slipe can't be negative")
x <- 100*orig/9
b <- 100*(1-slope)
if(orig != 0){
return(slope * x + b)
}else{
cat("returning 0")
return(0)
}
}
df
df[14,]
df[14,3] <- 3
cgrades <- sapply(df[,3], curve, .5)
hist(cgrades)
summary(cgrades)
sort(cgrades)
hist(cgrades[cgrades>0])
summary(cgrades)
sort(cgrades)
df$cgrades <- round(cgrades,1)
df[14,3]
df[14]
df[14,]
C1 <- matrix(c(1,.3, .3, 1), nrow=2)
C1
C <- matrix(c(1,.3, .3, 1), nrow=2)
C1hat <- matrix(c(1,.25, .25, 1), nrow=2)
C1hat
C2hat <- matrix(c(1, .2, .2, 1), nrow=2)
norm(C)
norm(C1hat - C)
norm(C1hat - C) < norm(C2hat - C)
diag(2)
norm(C %*% solve(C1hat) - diag(2))
norm(C %*% solve(C1hat) - diag(2)) < norm(C %*% solve(C2hat) - diag(2))
rep(1,2)
w1 <- solve(C1hat) * rep(1,2)
w1
w1 <- solve(C1hat) %*% rep(1,2)
w1
w2 <- solve(C2hat) * rep(1,2)
w2 <- w2 / sum(w2)
w2
w1 <- solve(C1hat) %*% rep(1,2)
w1 <- w1 / sum(w1)
w2 <- solve(C2hat) %*% rep(1,2)
w2 <- w2 / sum(w2)
w1
w2
C <- matrix(c(1,.3, .3, 1), nrow=2)
C1hat <- matrix(c(1,.25, .25, 1), nrow=2)
C2hat <- matrix(c(1.1, .2, .2, 1.1), nrow=2)
norm(C1hat - C) < norm(C2hat - C)
norm(C %*% solve(C1hat) - diag(2)) < norm(C %*% solve(C2hat) - diag(2))
w1 <- solve(C1hat) %*% rep(1,2)
w1 <- w1 / sum(w1)
w2 <- solve(C2hat) %*% rep(1,2)
w2 <- w2 / sum(w2)
w1
w2
var2 <- t(w2) %*% C %*% w2
var1 <- t(w1) %*% C %*% w1
var1 <= var2
C <- matrix(c(1,.3, .3, 1), nrow=2)
C1hat <- matrix(c(1,.25, .25, 1), nrow=2)
C2hat <- matrix(c(1.1, .2, .2, 1), nrow=2)
norm(C1hat - C) < norm(C2hat - C)
norm(C %*% solve(C1hat) - diag(2)) < norm(C %*% solve(C2hat) - diag(2))
w1 <- solve(C1hat) %*% rep(1,2)
w1 <- w1 / sum(w1)
w2 <- solve(C2hat) %*% rep(1,2)
w2 <- w2 / sum(w2)
var1 <- t(w1) %*% C %*% w1
var2 <- t(w2) %*% C %*% w2
var1 <= var2
cat("first cond. satisfied: ", norm(C1hat - C) < norm(C2hat - C))
cat("second cond. satisfied: ", norm(C %*% solve(C1hat) - diag(2)) < norm(C %*% solve(C2hat) - diag(2)))
C <- matrix(c(1,.3, .3, 1), nrow=2)
C1hat <- matrix(c(1,0, 0, 1), nrow=2)
C2hat <- matrix(c(1.1, .2, .2, 1), nrow=2)
cat("first cond. satisfied: ", norm(C1hat - C) < norm(C2hat - C))
cat("second cond. satisfied: ", norm(C %*% solve(C1hat) - diag(2)) < norm(C %*% solve(C2hat) - diag(2)))
w1 <- solve(C1hat) %*% rep(1,2)
w1 <- w1 / sum(w1)
w2 <- solve(C2hat) %*% rep(1,2)
w2 <- w2 / sum(w2)
var1 <- t(w1) %*% C %*% w1
var2 <- t(w2) %*% C %*% w2
cat("final: ", var1 <= var2)
C <- matrix(c(1,.3, .3, 1), nrow=2)
C1hat <- matrix(c(1.1, .2, .2, 1), nrow=2)
C2hat <- matrix(c(1,0, 0, 1), nrow=2)
cat("first cond. satisfied: ", norm(C1hat - C) < norm(C2hat - C))
cat("second cond. satisfied: ", norm(C %*% solve(C1hat) - diag(2)) < norm(C %*% solve(C2hat) - diag(2)))
w1 <- solve(C1hat) %*% rep(1,2)
w1 <- w1 / sum(w1)
w2 <- solve(C2hat) %*% rep(1,2)
w2 <- w2 / sum(w2)
var1 <- t(w1) %*% C %*% w1
var2 <- t(w2) %*% C %*% w2
cat("final: ", var1 <= var2)
?norm
cat("first cond. satisfied: ", norm(C1hat - C, "2") < norm(C2hat - C, "2"))
cat("second cond. satisfied: ", norm(C %*% solve(C1hat) - diag(2), "2") < norm(C %*% solve(C2hat) - diag(2), "2"))
C1hat
C2hat
cat("first cond. satisfied: ", norm(C1hat - C, "2") < norm(C2hat - C, "2"))
cat("second cond. satisfied: ", norm(C %*% solve(C1hat) - diag(2), "2") < norm(C %*% solve(C2hat) - diag(2), "2"))
w1 <- solve(C1hat) %*% rep(1,2)
w1 <- w1 / sum(w1)
w2 <- solve(C2hat) %*% rep(1,2)
w2 <- w2 / sum(w2)
var1 <- t(w1) %*% C %*% w1
var2 <- t(w2) %*% C %*% w2
cat("final: ", var1 <= var2)
norm.type <- "f"
C <- matrix(c(1,.3, .3, 1), nrow=2)
C1hat <- matrix(c(1.1, .2, .2, 1), nrow=2)
C2hat <- matrix(c(1,0, 0, 1), nrow=2)
cat("first cond. satisfied: ", norm(C1hat - C, norm.type) < norm(C2hat - C, norm.type))
cat("second cond. satisfied: ", norm(C %*% solve(C1hat) - diag(2), norm.type) < norm(C %*% solve(C2hat) - diag(2), norm.type))
w1 <- solve(C1hat) %*% rep(1,2)
w1 <- w1 / sum(w1)
w2 <- solve(C2hat) %*% rep(1,2)
w2 <- w2 / sum(w2)
var1 <- t(w1) %*% C %*% w1
var2 <- t(w2) %*% C %*% w2
cat("final: ", var1 <= var2)
norm.type <- "f"
C <- matrix(c(1,.3, .3, 1), nrow=2)
C1hat <- matrix(c(1.1, .2, .2, 1), nrow=2)
C2hat <- matrix(c(1,0, 0, 1), nrow=2)
cat("first cond. satisfied: ", norm(C1hat - C, norm.type) < norm(C2hat - C, norm.type))
cat("second cond. satisfied: ", norm(C %*% solve(C1hat) - diag(2), norm.type) < norm(C %*% solve(C2hat) - diag(2), norm.type))
w1 <- solve(C1hat) %*% rep(1,2)
w1 <- w1 / sum(w1)
w2 <- solve(C2hat) %*% rep(1,2)
w2 <- w2 / sum(w2)
var1 <- t(w1) %*% C %*% w1
var2 <- t(w2) %*% C %*% w2
cat("final: ", var1 <= var2)
norm.type <- "m"
C <- matrix(c(1,.3, .3, 1), nrow=2)
C1hat <- matrix(c(1.1, .2, .2, 1), nrow=2)
C2hat <- matrix(c(1,0, 0, 1), nrow=2)
cat("first cond. satisfied: ", norm(C1hat - C, norm.type) < norm(C2hat - C, norm.type))
cat("second cond. satisfied: ", norm(C %*% solve(C1hat) - diag(2), norm.type) < norm(C %*% solve(C2hat) - diag(2), norm.type))
w1 <- solve(C1hat) %*% rep(1,2)
w1 <- w1 / sum(w1)
w2 <- solve(C2hat) %*% rep(1,2)
w2 <- w2 / sum(w2)
var1 <- t(w1) %*% C %*% w1
var2 <- t(w2) %*% C %*% w2
cat("final: ", var1 <= var2)
norm.type <- "1"
C <- matrix(c(1,.3, .3, 1), nrow=2)
C1hat <- matrix(c(1.1, .2, .2, 1), nrow=2)
C2hat <- matrix(c(1,0, 0, 1), nrow=2)
cat("first cond. satisfied: ", norm(C1hat - C, norm.type) < norm(C2hat - C, norm.type))
cat("second cond. satisfied: ", norm(C %*% solve(C1hat) - diag(2), norm.type) < norm(C %*% solve(C2hat) - diag(2), norm.type))
w1 <- solve(C1hat) %*% rep(1,2)
w1 <- w1 / sum(w1)
w2 <- solve(C2hat) %*% rep(1,2)
w2 <- w2 / sum(w2)
var1 <- t(w1) %*% C %*% w1
var2 <- t(w2) %*% C %*% w2
cat("final: ", var1 <= var2)
norm.type <- "i"
C <- matrix(c(1,.3, .3, 1), nrow=2)
C1hat <- matrix(c(1.1, .2, .2, 1), nrow=2)
C2hat <- matrix(c(1,0, 0, 1), nrow=2)
cat("first cond. satisfied: ", norm(C1hat - C, norm.type) < norm(C2hat - C, norm.type))
cat("second cond. satisfied: ", norm(C %*% solve(C1hat) - diag(2), norm.type) < norm(C %*% solve(C2hat) - diag(2), norm.type))
w1 <- solve(C1hat) %*% rep(1,2)
w1 <- w1 / sum(w1)
w2 <- solve(C2hat) %*% rep(1,2)
w2 <- w2 / sum(w2)
var1 <- t(w1) %*% C %*% w1
var2 <- t(w2) %*% C %*% w2
cat("final: ", var1 <= var2)
rnorm(n = sampSize, mean = mu, sd = sigma)
mu <- 100
sigma <- 4
sampSize <- 20
rnorm(n = sampSize, mean = mu, sd = sigma)
?pnorm
1 - pnorm((100-mean(samps))/sd(samps))
samps <- rnorm(n = sampSize, mean = mu, sd = sigma)
yi <- 1 - pnorm((100-mean(samps))/sd(samps))
yi
actual <- 1-pnorm((100-mu)/sigma)
actual
samps <- rnorm(n = sampSize, mean = mu, sd = sigma)
yi <- 1 - pnorm((100-mean(samps))/sd(samps))
(yi <- 1 - pnorm((100-mean(samps))/sd(samps)))
samps <- rnorm(n = sampSize, mean = mu, sd = sigma)
(yi <- 1 - pnorm((100-mean(samps))/sd(samps)))
samps <- rnorm(n = sampSize, mean = mu, sd = sigma)
(yi <- 1 - pnorm((100-mean(samps))/sd(samps)))
for(i in 1:10){
print(i)
}
for(i in 1:10){
print("hello")
}
for(i in 1:10){
actual <- 1-pnorm((100-mu)/sigma)
samps <- rnorm(n = sampSize, mean = mu, sd = sigma)
(yi <- 1 - pnorm((100-mean(samps))/sd(samps)))
}
for(i in 1:10){
actual <- 1-pnorm((100-mu)/sigma)
samps <- rnorm(n = sampSize, mean = mu, sd = sigma)
print(yi <- 1 - pnorm((100-mean(samps))/sd(samps)))
}
library(xts)
#mydir <- "/home/t/markets/example/daily_etfs/"
#setwd(mydir)
#list.files(path = ".", pattern='.csv$')
filenames <- list.files(path = "./daily_etfs/", pattern='.csv$')
csvfilepaths <- paste(getwd(), "/daily_etfs/", filenames, sep = "")
myDataFrames <- lapply(X = csvfilepaths, FUN = read.csv, header = T, stringsAsFactors=F)
column_names <- colnames(myDataFrames[[1]])
myIndexCols <- lapply(X = myDataFrames, FUN = function(df) df[,1])
commonDates <- as.Date(Reduce(intersect, myIndexCols))
myXtsDFs <- lapply(myDataFrames, function(df) {as.xts(df, order.by = as.Date(df[,1]))})
myXtsDFs <- lapply(myXtsDFs, function(xtsdf) xtsdf[commonDates])
library(xts)
#mydir <- "/home/t/markets/example/daily_etfs/"
#setwd(mydir)
#list.files(path = ".", pattern='.csv$')
filenames <- list.files(path = "./daily_etfs/", pattern='.csv$')
csvfilepaths <- paste(getwd(), "/daily_etfs/", filenames, sep = "")
myDataFrames <- lapply(X = csvfilepaths, FUN = read.csv, header = T, stringsAsFactors=F)
setwd("~/markets/example/")
#setwd("~/markets/example/")
filenames <- list.files(path = "./daily_etfs/", pattern='.csv$')
csvfilepaths <- paste(getwd(), "/daily_etfs/", filenames, sep = "")
myDataFrames <- lapply(X = csvfilepaths, FUN = read.csv, header = T, stringsAsFactors=F)
column_names <- colnames(myDataFrames[[1]])
myIndexCols <- lapply(X = myDataFrames, FUN = function(df) df[,1])
commonDates <- as.Date(Reduce(intersect, myIndexCols))
myXtsDFs <- lapply(myDataFrames, function(df) {as.xts(df, order.by = as.Date(df[,1]))})
myXtsDFs <- lapply(myXtsDFs, function(xtsdf) xtsdf[commonDates])
for(i in 1:length(myXtsDFs)){
path <- paste(getwd(), "/daily_etfs/clean_data/", filenames[i], sep = "")
print(path)
write.csv(myXtsDFs[[i]], file = path, quote = F, row.names = F)
}
